nextflow_pipeline {

    name "Full Integration Tests for SNVPHYLNFC"
    script "main.nf"

    test("Test max_samples: fails due to limit") {
    tag "fail_max_samples"

        when {
            params {
                input = "$baseDir/assets/samplesheet.csv"
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "$outputDir"
                max_samples = 2
            }
        }

        then {

            // Check the error-log file
            def max_sample_log = "${params.outdir}/error/max_samples_exceeded.error.txt"
            assert path(max_sample_log).exists()
            assert path(max_sample_log).readLines().contains("3 samples were selected, which exceeds the maximum number of samples: 2")

            // Check IRIDA Next JSON output
            assert path("${params.outdir}/iridanext.output.json.gz").exists()
            def lines = []
            lines = path("${params.outdir}/iridanext.output.json.gz").linesGzip.join("\n")
            assert lines.contains("\"path\": \"error/max_samples_exceeded.error.txt\"")
            assert snapshot(path("${params.outdir}/error/versions.yml")).match("versions")
        }

    }

    test("Test max_samples: succeeds with no-limit") {
    tag "pass_unlimited_max_samples"

        when {
            params {
                input = "$baseDir/assets/samplesheet.csv"
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "$outputDir"
                max_samples = 0 // Confirms that 0, or the default, acts as "unlimited samples"
            }
        }

        then {

            // Check the error-log file
            def max_sample_log = "${params.outdir}/error/max_samples_exceeded.error.txt"
            assert !(path(max_sample_log).exists())
        }

    }

    test("Test max_samples: succeeds within limit") {
    tag "pass_within_max_samples"

        when {
            params {
                input = "$baseDir/assets/samplesheet.csv"
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "$outputDir"
                max_samples = 3
            }
        }

        then {

            // Check the error-log file
            def max_sample_log = "${params.outdir}/error/max_samples_exceeded.error.txt"
            assert !(path(max_sample_log).exists())
        }

    }
}
