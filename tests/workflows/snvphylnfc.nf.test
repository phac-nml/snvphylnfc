nextflow_workflow {

    name "Full Integration Tests for PHACNML_SNVPHYL"
    script "workflows/snvphylnfc.nf"
    workflow "SNVPHYL"

    test("selecting reference by refgenome") {

        when {
            params {
                input = "$baseDir/assets/samplesheet.csv"
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "results"
            }
            workflow {}
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            def lines = []

            // check FILTER_STATS output
            lines = path("$launchDir/results/filter/filterStats.txt").readLines()

            assert lines.contains("Number of sites used to generate phylogeny: 2")
            assert lines.contains("Total number of sites identified: 2")
            assert lines.contains("Number of sites filtered: 0")

            // check filtered density files:
            assert path("$launchDir/results/consolidate/A_1__filtered_density.txt").exists()
            assert path("$launchDir/results/consolidate/B2_filtered_density.txt").exists()
            assert path("$launchDir/results/consolidate/B2_SAMPLE3_filtered_density.txt").exists()

            lines = path("$launchDir/results/cat/cat_invalid_positions.txt").readLines()
            assert lines.contains("#Calculation and writing of high density regions has completed.")

            // check PHYML output
            lines = path("$launchDir/results/phyml/phylogeneticTreeStats.txt").readLines()

            assert lines.contains(". Model of nucleotides substitution: \tGTR")
            assert lines.contains("  - f(A)=  0.75000")
            assert lines.contains("  - f(C)=  0.12500")
            assert lines.contains("  - f(G)=  0.01000")
            assert lines.contains("  - f(T)=  0.12500")

            lines = path("$launchDir/results/phyml/phylogeneticTree.newick").readLines()

            assert lines.join("\n").contains("A_1_")
            assert lines.join("\n").contains("B2")
            assert lines.join("\n").contains("B2_SAMPLE3")

            // check MAKE_SNV output
            lines = path("$launchDir/results/make/snvMatrix.tsv").readLines()

            assert lines[0] == "strain\tB2\tB2_SAMPLE3\tA_1_\treference\t"
            assert lines.contains("A_1_\t1\t1\t0\t0\t")
            assert lines.contains("B2\t0\t2\t1\t1\t")
            assert lines.contains("B2_SAMPLE3\t2\t0\t1\t1\t")

            // check IRIDA Next JSON file
            lines = path("$launchDir/results/iridanext.output.json.gz").linesGzip.join("\n")

            assert lines.contains("\"path\": \"make/snvMatrix.tsv\"")
            assert lines.contains("\"path\": \"filter/filterStats.txt\"")
            assert lines.contains("\"path\": \"phyml/phylogeneticTreeStats.txt\"")
            assert lines.contains("\"path\": \"phyml/phylogeneticTree.newick\"")
            assert lines.contains("\"path\": \"vcf2snv/snvTable.tsv\"")
            assert lines.contains("\"path\": \"vcf2snv/vcf2core.tsv\"")
            assert lines.contains("\"path\": \"vcf2snv/snvAlignment.phy\"")
            assert lines.contains("\"path\": \"verifying/mappingQuality.txt\"")
        }

    }

    test("selecting reference by sample id") {
        tag "ref_sample_id"
        when {
            params {
                input = "$baseDir/assets/samplesheet.csv"
                reference_sample_id = "A 1#"
                outdir = "results"
            }
            workflow {}
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            def lines = []

            // check FILTER_STATS output
            lines = path("$launchDir/results/filter/filterStats.txt").readLines()

            assert lines.contains("Number of sites used to generate phylogeny: 2")
            assert lines.contains("Total number of sites identified: 2")
            assert lines.contains("Number of sites filtered: 0")

            // check filtered density files:
            assert path("$launchDir/results/consolidate/A_1__filtered_density.txt").exists()
            assert path("$launchDir/results/consolidate/B2_filtered_density.txt").exists()
            assert path("$launchDir/results/consolidate/B2_SAMPLE3_filtered_density.txt").exists()

            lines = path("$launchDir/results/cat/cat_invalid_positions.txt").readLines()
            assert lines.contains("#Calculation and writing of high density regions has completed.")

            // check PHYML output
            lines = path("$launchDir/results/phyml/phylogeneticTreeStats.txt").readLines()

            assert lines.contains(". Model of nucleotides substitution: \tGTR")
            assert lines.contains("  - f(A)=  0.75000")
            assert lines.contains("  - f(C)=  0.12500")
            assert lines.contains("  - f(G)=  0.01000")
            assert lines.contains("  - f(T)=  0.12500")

            lines = path("$launchDir/results/phyml/phylogeneticTree.newick").readLines()

            assert lines.join("\n").contains("A_1_")
            assert lines.join("\n").contains("B2")
            assert lines.join("\n").contains("B2_SAMPLE3")

            // check MAKE_SNV output
            lines = path("$launchDir/results/make/snvMatrix.tsv").readLines()

            assert lines[0] == "strain\tB2\tB2_SAMPLE3\tA_1_\treference\t"
            assert lines.contains("A_1_\t1\t1\t0\t0\t")
            assert lines.contains("B2\t0\t2\t1\t1\t")
            assert lines.contains("B2_SAMPLE3\t2\t0\t1\t1\t")

            // check IRIDA Next JSON file
            lines = path("$launchDir/results/iridanext.output.json.gz").linesGzip.join("\n")

            assert lines.contains("\"path\": \"make/snvMatrix.tsv\"")
            assert lines.contains("\"path\": \"filter/filterStats.txt\"")
            assert lines.contains("\"path\": \"phyml/phylogeneticTreeStats.txt\"")
            assert lines.contains("\"path\": \"phyml/phylogeneticTree.newick\"")
            assert lines.contains("\"path\": \"vcf2snv/snvTable.tsv\"")
            assert lines.contains("\"path\": \"vcf2snv/vcf2core.tsv\"")
            assert lines.contains("\"path\": \"vcf2snv/snvAlignment.phy\"")
            assert lines.contains("\"path\": \"verifying/mappingQuality.txt\"")
        }

    }

    test("selecting no reference (failure)") {

        when {
            params {
                input = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/samplesheet.csv"
                outdir = "results"
            }
            workflow {}
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Unable to select a reference. Neither '--refgenome' nor '--reference_sample_id' were provided.")
        }

    }

    test("disabling snv density filtering") {

        when {
            params {
                input = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/samplesheet.csv"
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "results"
                skip_density_filter = true
            }
            workflow {}
        }

        then {
            def lines = []

            assert workflow.success
            assert path("$launchDir/results").exists()

            // check that no "_filtered_density.txt" files exist:
            assert path("$launchDir/results/consolidate/A_1__filtered_density.txt").exists() == false
            assert path("$launchDir/results/consolidate/B2_filtered_density.txt").exists() == false
            assert path("$launchDir/results/consolidate/B2_SAMPLE3_filtered_density.txt").exists() == false

            lines = path("$launchDir/results/cat/cat_invalid_positions.bed").readLines()
            assert lines.contains("#Calculation and writing of high density regions has completed.") == false
        }

    }

    test("compressed reference") {

        when {
            params {
                input = "$baseDir/assets/samplesheet.csv"
                refgenome = "https://github.com/phac-nml/snvphylnfc/raw/dev/tests/data/reference.fasta.gz"
                outdir = "results"
            }
            workflow {}
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            def lines = []

            // check FILTER_STATS output
            lines = path("$launchDir/results/filter/filterStats.txt").readLines()

            assert lines.contains("Number of sites used to generate phylogeny: 2")
            assert lines.contains("Total number of sites identified: 2")
            assert lines.contains("Number of sites filtered: 0")

            // check filtered density files:
            assert path("$launchDir/results/consolidate/A_1__filtered_density.txt").exists()
            assert path("$launchDir/results/consolidate/B2_filtered_density.txt").exists()
            assert path("$launchDir/results/consolidate/B2_SAMPLE3_filtered_density.txt").exists()

            lines = path("$launchDir/results/cat/cat_invalid_positions.txt").readLines()
            assert lines.contains("#Calculation and writing of high density regions has completed.")

            // check PHYML output
            lines = path("$launchDir/results/phyml/phylogeneticTreeStats.txt").readLines()

            assert lines.contains(". Model of nucleotides substitution: \tGTR")
            assert lines.contains("  - f(A)=  0.75000")
            assert lines.contains("  - f(C)=  0.12500")
            assert lines.contains("  - f(G)=  0.01000")
            assert lines.contains("  - f(T)=  0.12500")

            lines = path("$launchDir/results/phyml/phylogeneticTree.newick").readLines()

            assert lines.join("\n").contains("A_1_")
            assert lines.join("\n").contains("B2")
            assert lines.join("\n").contains("B2_SAMPLE3")

            // check MAKE_SNV output
            lines = path("$launchDir/results/make/snvMatrix.tsv").readLines()

            assert lines[0] == "strain\tB2\tB2_SAMPLE3\tA_1_\treference\t"
            assert lines.contains("A_1_\t1\t1\t0\t0\t")
            assert lines.contains("B2\t0\t2\t1\t1\t")
            assert lines.contains("B2_SAMPLE3\t2\t0\t1\t1\t")

            // check IRIDA Next JSON file
            lines = path("$launchDir/results/iridanext.output.json.gz").linesGzip.join("\n")

            assert lines.contains("\"path\": \"make/snvMatrix.tsv\"")
            assert lines.contains("\"path\": \"filter/filterStats.txt\"")
            assert lines.contains("\"path\": \"phyml/phylogeneticTreeStats.txt\"")
            assert lines.contains("\"path\": \"phyml/phylogeneticTree.newick\"")
            assert lines.contains("\"path\": \"vcf2snv/snvTable.tsv\"")
            assert lines.contains("\"path\": \"vcf2snv/vcf2core.tsv\"")
            assert lines.contains("\"path\": \"vcf2snv/snvAlignment.phy\"")
            assert lines.contains("\"path\": \"verifying/mappingQuality.txt\"")
        }

    }

}
