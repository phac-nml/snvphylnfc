nextflow_process {

    name "Test Process FREEBAYES"
    script "modules/local/freebayes/main.nf"
    process "FREEBAYES"

    test("A_1_") {

        when {
            params {
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "results"
            }
            process {
                """
                input[0] = new Tuple(["id": "A_1_"], file("$baseDir/tests/data/A_1__sorted.bam"))
                input[1] = params.refgenome
                """
            }
        }

        then {
            assert process.success

            with(process.out) {

                meta_and_path = vcf_files[0]
                meta_component = meta_and_path[0]
                path_component = meta_and_path[1]

                assert path(path_component).exists()

                def lines = path(path_component).readLines()
                assert lines.contains("##reference=reference.fasta")
                assert lines.contains("##contig=<ID=reference,length=700>")
                assert lines[-1] == "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tunknown"
            }
        }

    }

    test("B2") {

        when {
            params {
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "results"
            }
            process {
                """
                input[0] = new Tuple(["id": "B2"], file("$baseDir/tests/data/B2_sorted.bam"))
                input[1] = params.refgenome
                """
            }
        }

        then {
            assert process.success

            with(process.out) {

                meta_and_path = vcf_files[0]
                meta_component = meta_and_path[0]
                path_component = meta_and_path[1]

                assert path(path_component).exists()

                def lines = path(path_component).readLines()
                assert lines.contains("##reference=reference.fasta")
                assert lines.contains("##contig=<ID=reference,length=700>")
                assert lines[-2] == "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tunknown"
                assert lines[-1] == "reference\t4\t.\tA\tT\t582.476\t.\tAB=0;ABP=0;AC=1;AF=1;AN=1;AO=18;CIGAR=1X;DP=18;DPB=18;DPRA=0;EPP=3.0103;EPPR=0;GTI=0;LEN=1;MEANALT=1;MQM=60;MQMR=0;NS=1;NUMALT=1;ODDS=134.12;PAIRED=1;PAIREDR=0;PAO=0;PQA=0;PQR=0;PRO=0;QA=720;QR=0;RO=0;RPL=0;RPP=42.0968;RPPR=0;RPR=18;RUN=1;SAF=9;SAP=3.0103;SAR=9;SRF=0;SRP=0;SRR=0;TYPE=snp\tGT:DP:AD:RO:QR:AO:QA:GL\t1:18:0,18:0:0:18:720:-65.1296,0"
            }
        }

    }

    test("B2_SAMPLE3") {

        when {
            params {
                refgenome = "https://raw.githubusercontent.com/phac-nml/snvphylnfc/dev/assets/reference.fasta"
                outdir = "results"
            }
            process {
                """
                input[0] = new Tuple(["id": "B2_SAMPLE3"], file("$baseDir/tests/data/B2_SAMPLE3_sorted.bam"))
                input[1] = params.refgenome
                """
            }
        }

        then {
            assert process.success

            with(process.out) {

                meta_and_path = vcf_files[0]
                meta_component = meta_and_path[0]
                path_component = meta_and_path[1]

                assert path(path_component).exists()

                def lines = path(path_component).readLines()
                assert lines.contains("##reference=reference.fasta")
                assert lines.contains("##contig=<ID=reference,length=700>")
                assert lines[-2] == "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tunknown"
                assert lines[-1] == "reference\t48\t.\tA\tC\t453.194\t.\tAB=0;ABP=0;AC=1;AF=1;AN=1;AO=16;CIGAR=1X;DP=18;DPB=18;DPRA=0;EPP=3.0103;EPPR=3.0103;GTI=0;LEN=1;MEANALT=1;MQM=60;MQMR=60;NS=1;NUMALT=1;ODDS=104.352;PAIRED=1;PAIREDR=1;PAO=0;PQA=0;PQR=0;PRO=0;QA=640;QR=80;RO=2;RPL=16;RPP=37.7539;RPPR=7.35324;RPR=0;RUN=1;SAF=8;SAP=3.0103;SAR=8;SRF=1;SRP=3.0103;SRR=1;TYPE=snp\tGT:DP:AD:RO:QR:AO:QA:GL\t1:18:2,16:2:80:16:640:-50.3456,0"
            }
        }

    }
}
